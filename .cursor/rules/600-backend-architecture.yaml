---
name: "Backend Architecture"
category: "600-699"
description: "Standards for Express server and PostgreSQL integration"

security_context:
  type: "Personal Project"
  description: "This is a personal garage project with no other users or access requirements. Security measures against data leaks and external threats are not needed."

server_architecture:
  framework: "Express.js"
  structure:
    root:
      - name: "server/"
        purpose: "Backend server code"
        contents:
          - "index.js: Main server entry point"
          - "routes/: API route definitions"
          - "controllers/: Request handlers"
          - "models/: Database models"
          - "middleware/: Custom middleware"
          - "config/: Configuration files"
          - "utils/: Utility functions"

api_design:
  rest_endpoints:
    base_url: "/api/v1"
    structure:
      - path: "/budgets"
        methods: ["GET", "POST"]
        purpose: "Budget management"
      - path: "/transactions"
        methods: ["GET", "POST", "PUT", "DELETE"]
        purpose: "Transaction management"
      - path: "/chat"
        methods: ["POST"]
        purpose: "AI chat interactions"

  middleware:
    global:
      - "Error handling"
      - "Authentication"
      - "Request logging"
      - "CORS configuration"
    
    route_specific:
      - "Request validation"
      - "Rate limiting"
      - "Cache control"

database_connection:
  type: "PostgreSQL"
  hosting: "Replit"
  configuration:
    connection_pool:
      min: 2
      max: 10
    ssl: true
    timezone: "UTC"
  
  management:
    - "Connection pooling"
    - "Error handling"
    - "Reconnection strategy"
    - "Query logging"

security:
  note: "As this is a personal project, complex security measures are not required"
  basic_requirements:
    - "Basic environment variable management"
    - "Simple token storage"
    - "Default Express security headers"

error_handling:
  strategies:
    - "Centralized error handling"
    - "Custom error classes"
    - "Detailed logging"
    - "Client-friendly messages"
  
  logging:
    - "Request/response logging"
    - "Error tracking"
    - "Performance monitoring"
    - "Security events"

deployment:
  environment:
    platform: "Replit"
    configuration:
      - "Environment variables"
      - "Build scripts"
      - "Start commands"
  
  monitoring:
    - "Health checks"
    - "Performance metrics"
    - "Error tracking"
    - "Database monitoring"

integration_points:
  frontend:
    - "API endpoints"
    - "WebSocket connections"
    - "Event handling"
  
  external_services:
    - "YNAB API"
    - "OpenAI API"
    - "Database service"

performance:
  optimizations:
    - "Query optimization"
    - "Connection pooling"
    - "Response caching"
    - "Compression"
    - "Load balancing"

best_practices:
  - "Follow RESTful principles"
  - "Implement proper error handling"
  - "Use environment variables"
  - "Maintain API documentation"
  - "Regular security audits"
  - "Database backups"
  - "Performance monitoring" 